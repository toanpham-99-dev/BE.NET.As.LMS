// <auto-generated />
using System;
using BE.NET.As.LMS.Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BE.NET.As.LMS.Migrations
{
    [DbContext(typeof(LMSDataContext))]
    [Migration("20220114080820_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("QuizId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AnswerContent = "Can we do this?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(9521),
                            HashCode = "D9FF643C-CE04-4CCF-A26B-431967D4EA24",
                            IsCorrect = true,
                            QuizId = 1L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(9547),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            AnswerContent = "How to search unicode?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1566),
                            HashCode = "B0687982-1590-460C-A0FA-D12D73B6B5D0",
                            IsCorrect = true,
                            QuizId = 1L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1579),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            AnswerContent = "Filter sort?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1590),
                            HashCode = "625728E7-F56A-4F01-8426-DD2DDBC83A59",
                            IsCorrect = true,
                            QuizId = 2L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1593),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            AnswerContent = "Can we do this?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1617),
                            HashCode = "6C7C1838-0C0F-4B64-92B7-530C6AAC098E",
                            IsCorrect = true,
                            QuizId = 2L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1619),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            AnswerContent = "Can we do this?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1627),
                            HashCode = "649C0E26-0834-4437-BAAF-A4ACBC12CF78",
                            IsCorrect = true,
                            QuizId = 3L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1629),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            AnswerContent = "Can we do this?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1636),
                            HashCode = "67FF1756-D8A1-4157-8E27-B26E4762B8BC",
                            IsCorrect = true,
                            QuizId = 3L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1638),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7L,
                            AnswerContent = "Can we do this?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1645),
                            HashCode = "6402B5A9-1342-4BD6-8F90-0F424F1CB0FD",
                            IsCorrect = true,
                            QuizId = 4L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1646),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8L,
                            AnswerContent = "Can we do this?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1657),
                            HashCode = "E0FCC671-4917-4C0D-84D9-29E4FABD0BAF",
                            IsCorrect = true,
                            QuizId = 4L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1659),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9L,
                            AnswerContent = "Can we do this?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1665),
                            HashCode = "5DE494DD-A535-489B-A845-BD370DC5A611",
                            IsCorrect = true,
                            QuizId = 5L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1667),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10L,
                            AnswerContent = "Can we do this?",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1672),
                            HashCode = "209B8442-4305-4BB3-9442-42AC0A18EE86",
                            IsCorrect = true,
                            QuizId = 5L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(1674),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Assignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("LessonId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AssignmentName = "Assignment name 1",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(1080),
                            HashCode = "54EC57F9-6CC6-4581-BC24-34FA6E8391EC",
                            LessonId = 1L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(1105),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            AssignmentName = "Assignment name 2",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2289),
                            HashCode = "C6BAAD97-F161-4940-B44A-FDFE0282DBD3",
                            LessonId = 1L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2299),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            AssignmentName = "Assignment name 3",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2311),
                            HashCode = "755AB990-AD10-42F4-9AC9-5F7D0137E1A3",
                            LessonId = 2L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2313),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            AssignmentName = "Assignment name 4",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2320),
                            HashCode = "EA2DD1E1-2CED-4344-B0B6-B931AA939500",
                            LessonId = 2L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2322),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            AssignmentName = "Assignment name 5",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2329),
                            HashCode = "4FBACC4A-703C-49A9-B973-29E92BDA4C6D",
                            LessonId = 3L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2331),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            AssignmentName = "Assignment name 6",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2337),
                            HashCode = "CEFF1199-EAEB-4873-BF5F-AD799108ADBF",
                            LessonId = 3L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2338),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7L,
                            AssignmentName = "Assignment name 7",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2356),
                            HashCode = "30DA8FB2-099C-4ED3-8E0B-669BED4DAF6F",
                            LessonId = 4L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2358),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8L,
                            AssignmentName = "Assignment name 8",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2365),
                            HashCode = "BA369E3C-4273-4293-833E-F5475CBBF36D",
                            LessonId = 5L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(2367),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.AssignmentUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.ToTable("AssignmentUsers");

                    b.HasData(
                        new
                        {
                            UserId = 3L,
                            AssignmentId = 1L,
                            HashCode = "6FAEC462-0F1E-4043-A3B4-DC8030965FF7",
                            Link = "Link AssignmentUser1",
                            Point = 0
                        },
                        new
                        {
                            UserId = 3L,
                            AssignmentId = 2L,
                            HashCode = "64AADA74-A7F7-45DB-B25D-726917225AAC",
                            Link = "Link AssignmentUser2",
                            Point = 0
                        },
                        new
                        {
                            UserId = 4L,
                            AssignmentId = 3L,
                            HashCode = "BBE9DEA8-BF9D-4635-96C0-9584777D9BFC",
                            Link = "Link AssignmentUser3",
                            Point = 0
                        },
                        new
                        {
                            UserId = 4L,
                            AssignmentId = 4L,
                            HashCode = "7ADD7CDB-4FF4-4E8C-A9D0-B28EF55A2EC6",
                            Link = "Link AssignmentUser4",
                            Point = 0
                        },
                        new
                        {
                            UserId = 5L,
                            AssignmentId = 5L,
                            HashCode = "CA1D5B58-335E-4902-A768-66248CE43485",
                            Link = "Link AssignmentUser5",
                            Point = 0
                        },
                        new
                        {
                            UserId = 5L,
                            AssignmentId = 6L,
                            HashCode = "ED7E0669-A242-4863-9C37-DE2518D109FA",
                            Link = "Link AssignmentUser6",
                            Point = 0
                        },
                        new
                        {
                            UserId = 5L,
                            AssignmentId = 7L,
                            HashCode = "C04974AC-82EC-4B66-811E-7196B903EB78",
                            Link = "Link AssignmentUser7",
                            Point = 0
                        },
                        new
                        {
                            UserId = 3L,
                            AssignmentId = 8L,
                            HashCode = "344FDB9C-6C6B-45B7-90A0-1899C053A4E3",
                            Link = "Link AssignmentUser8",
                            Point = 0
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Alias = "web",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 395, DateTimeKind.Local).AddTicks(8780),
                            CreatedBy = "admin",
                            Description = "Kiến thức về Web",
                            HashCode = "3214928A0-E936-4BF0-BD08-12DF85F34979",
                            ImageURL = "link1",
                            Status = 0,
                            Title = "Web",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(3579),
                            UpdatedBy = "admin",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            Alias = "design",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(8129),
                            CreatedBy = "instructor 1",
                            Description = "Học thiết kế cơ bản",
                            HashCode = "375AF6DE-72A0-4601-83A7-6740A7D4E0F0",
                            ImageURL = "link1",
                            ParentId = 1L,
                            Status = 0,
                            Title = "Design",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(8138),
                            UpdatedBy = "instructor 1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            Alias = "business",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(8148),
                            CreatedBy = "instructor 1",
                            Description = "Quản trị nhân sự",
                            HashCode = "E10D2A57-1AF2-4EB4-84CA-77F1036F7FD7",
                            ImageURL = "link1",
                            ParentId = 2L,
                            Status = 0,
                            Title = "Business",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(8150),
                            UpdatedBy = "admin",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            Alias = "basic",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(8155),
                            CreatedBy = "admin",
                            Description = "Học asp.net mvc cơ bản",
                            HashCode = "166769CE-C916-488A-A828-73D614FEE28F",
                            ImageURL = "link1",
                            ParentId = 2L,
                            Status = 0,
                            Title = "Asp.net mvc",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(8156),
                            UpdatedBy = "instructor 1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            Alias = "frontend",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(8161),
                            CreatedBy = "instructor 2",
                            Description = "Bài giảng thiết kế giao diện HTML, CSS",
                            HashCode = "0A7D4CD3-32BB-4E9F-B2FD-E68D8B467C5D",
                            ImageURL = "link1",
                            ParentId = 3L,
                            Status = 0,
                            Title = "Thiết kế giao diện",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(8162),
                            UpdatedBy = "instructor 2",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("LessonId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Đánh giá khóa học",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(6250),
                            HashCode = "A42B7705-7BAE-4358-89FF-DB6D92C65BA0",
                            LessonId = 1L,
                            LikeCount = 30,
                            Status = 0,
                            Title = "Bài học hữu ích và hay",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(6262),
                            UserId = 3L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Đánh giá nội dung",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8329),
                            HashCode = "96B2E210-6C1D-413B-9676-A9436EF976AB",
                            LessonId = 2L,
                            LikeCount = 5,
                            ParentId = 2L,
                            Status = 0,
                            Title = "Cần cải thiện nội dung bài học chi tiết hơn",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8336),
                            UserId = 3L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            Content = "Đánh giá nội dung",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8424),
                            HashCode = "FF532BFC-A866-4C55-A7E1-B83BCB233F49",
                            LessonId = 3L,
                            LikeCount = 25,
                            ParentId = 3L,
                            Status = 0,
                            Title = "Cần cải thiện nội dung bài học chi tiết hơn",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8426),
                            UserId = 3L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            Content = "Đánh giá nội dung",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8431),
                            HashCode = "FAF27910-A14B-48CB-8788-9C05F784AA19",
                            LessonId = 4L,
                            LikeCount = 20,
                            ParentId = 4L,
                            Status = 0,
                            Title = "Cần cải thiện nội dung bài học chi tiết hơn",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8432),
                            UserId = 4L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            Content = "Đánh giá nội dung",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8437),
                            HashCode = "3A7C987A-9719-4145-B478-BD366B2762B2",
                            LessonId = 5L,
                            LikeCount = 15,
                            ParentId = 5L,
                            Status = 0,
                            Title = "Cần cải thiện nội dung bài học chi tiết hơn",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8438),
                            UserId = 4L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            Content = "Đánh giá nội dung",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8443),
                            HashCode = "7854EEC9-937B-45E9-B476-FEFF62BAB968",
                            LessonId = 6L,
                            LikeCount = 35,
                            ParentId = 6L,
                            Status = 0,
                            Title = "Cần cải thiện nội dung bài học chi tiết hơn",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8444),
                            UserId = 4L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7L,
                            Content = "Đánh giá nội dung",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8456),
                            HashCode = "8226A0AE-C6AD-41DF-9519-A34040154A36",
                            LessonId = 7L,
                            LikeCount = 31,
                            ParentId = 7L,
                            Status = 0,
                            Title = "Cần cải thiện nội dung bài học chi tiết hơn",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8457),
                            UserId = 5L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8L,
                            Content = "Đánh giá nội dung",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8462),
                            HashCode = "E7DEFD81-FB1E-4D10-979D-099D03E6DBA3",
                            LessonId = 8L,
                            LikeCount = 17,
                            ParentId = 8L,
                            Status = 0,
                            Title = "Cần cải thiện nội dung bài học chi tiết hơn",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(8464),
                            UserId = 5L,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DescriptionDetailId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorHashCodeCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("PublishedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Syllabus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 1L,
                            Content = "<ul><li> Giúp bạn nắm được kiến thức cơ bản về HTML và CSS </li>\"<li> Hiểu được thành phần của một trang web</li>\"<li> Xây dựng một trang web tĩnh cơ bản.</li></ul>",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(9215),
                            CreatedBy = "FullStack",
                            Description = "Để có cái nhìn tổng quan về ngành IT - Lập trình web các bạn nên xem các videos tại khóa này trước nhé.",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "1234928A0-E936-4BF0-BD08-12DF85F34979",
                            ImageURL = "1.png",
                            InstructorHashCodeCreated = "3670CCE4-A029-4A83-A047-BB1FE3E1D3F1",
                            Level = 1,
                            Price = 0m,
                            Rating = 2.0,
                            Status = 1,
                            Summary = "Tóm tắt về khóa học",
                            Syllabus = "Giáo trình 1",
                            Title = "Kiến Thức Nhập Môn",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 398, DateTimeKind.Local).AddTicks(9222),
                            ViewCount = 43321,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 1L,
                            Content = "<ul><li> Giúp bạn nắm được kiến thức cơ bản về HTML và CSS </li><li> Hiểu được thành phần của một trang web</li><li> Xây dựng một trang web tĩnh cơ bản.</li></ul>",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(4283),
                            CreatedBy = "FullStack",
                            Description = "Để có cái nhìn tổng quan về ngành IT - Lập trình web các bạn nên xem các videos tại khóa này trước nhé.",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "3221CCE4-A029-4A83-A047-BB1FE3E1D3F1",
                            ImageURL = "1.png",
                            InstructorHashCodeCreated = "D9E58D24-67C4-489B-8E12-4E93AF068726",
                            Level = 1,
                            Price = 0m,
                            Rating = 5.0,
                            Status = 1,
                            Summary = "Tóm tắt về khóa học",
                            Syllabus = "Giáo trình 1",
                            Title = "HTML, CSS từ Zero đến Hero",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(4292),
                            ViewCount = 32123,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 2L,
                            Content = "<ul><li> Giúp bạn nắm được kiến thức cơ bản về HTML và CSS </li><li> Hiểu được thành phần của một trang web</li><li> Xây dựng một trang web tĩnh cơ bản.</li></ul>",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(4302),
                            CreatedBy = "Frontend",
                            Description = "Để có cái nhìn tổng quan về ngành IT - Lập trình web các bạn nên xem các videos tại khóa này trước nhé.",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "D8E64356-21B3-4D8A-820B-E101548A033D",
                            ImageURL = "3.png",
                            InstructorHashCodeCreated = "88385ACA-7D80-4B6F-8CDC-33E2E6EBFF41",
                            Level = 2,
                            Price = 90000m,
                            Rating = 3.0,
                            Status = 1,
                            Summary = "Tóm tắt về khóa học",
                            Syllabus = "Giáo trình 2",
                            Title = "HTML, CSS từ cơ bản đến nâng cao",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(4303),
                            ViewCount = 1231,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 3L,
                            Content = "<ul><li> Giúp bạn nắm được kiến thức cơ bản về HTML và CSS </li><li> Hiểu được thành phần của một trang web</li><li> Xây dựng một trang web tĩnh cơ bản.</li></ul>",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(4329),
                            CreatedBy = "Backend",
                            Description = "Để có cái nhìn tổng quan về ngành IT - Lập trình web các bạn nên xem các videos tại khóa này trước nhé.",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "0F3B51E6-7DD9-4861-A693-53C7E258EE5E",
                            ImageURL = "4.png",
                            InstructorHashCodeCreated = "D9E58D24-67C4-489B-8E12-4E93AF068726",
                            Level = 2,
                            Price = 45000m,
                            Rating = 4.0,
                            Status = 1,
                            Summary = "Tóm tắt về khóa học",
                            Syllabus = "Giáo trình 3",
                            Title = "Lập trình nâng cao JavaScript",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(4331),
                            ViewCount = 1231,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 3L,
                            Content = "Kiến thức nâng cao",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(4337),
                            CreatedBy = "Backend",
                            Description = "Để có cái nhìn tổng quan về ngành IT - Lập trình web các bạn nên xem các videos tại khóa này trước nhé.",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "0FE71577-FF4B-4CCD-B514-B002AED2B49F",
                            ImageURL = "5.png",
                            InstructorHashCodeCreated = "3670CCE4-A029-4A83-A047-BB1FE3E1D3F1",
                            Level = 0,
                            Price = 45000m,
                            Rating = 5.0,
                            Status = 1,
                            Summary = "Tóm tắt về khóa học",
                            Syllabus = "Giáo trình 3",
                            Title = "Lập trình JavaScrip Cơ Bản",
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(4338),
                            ViewCount = 32321,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.DescriptionDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique()
                        .HasFilter("[CourseId] IS NOT NULL");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.ToTable("DescriptionDetails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9159),
                            HashCode = "27802CEC-BF9C-4DEA-B81F-B6755FF307C0",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9167),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 2L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9605),
                            HashCode = "0C7DA9E9-00E3-4B0C-9754-3AD8AC2CB2BA",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9610),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CourseId = 3L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9615),
                            HashCode = "B9137264-D116-4C19-A04B-AD1626C9279E",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9617),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CourseId = 4L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9620),
                            HashCode = "767A99BE-81D7-48C9-BF7A-1EBEA7A11206",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9622),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CourseId = 5L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9626),
                            HashCode = "70954743-B945-4EFF-8CDB-99C6CAADDAC8",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 405, DateTimeKind.Local).AddTicks(9627),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LinkVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("SectionId");

                    b.ToTable("Lesson");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(7704),
                            Description = "Tổng quan về mô hình",
                            Duration = new TimeSpan(0, 0, 12, 13, 0),
                            HashCode = "521TF81B-BE99-489F-AD23-9990F655C7D5",
                            LinkVideo = "https://youtu.be/CyZ_O7v62h4",
                            Name = "Học IT cần tố chất gì? Góc nhìn khác từ chuyên gia định hướng giáo dục",
                            Priority = 0,
                            SectionId = 1L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(7715),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(41),
                            Description = "Lesson 2",
                            Duration = new TimeSpan(0, 0, 6, 13, 0),
                            HashCode = "631TF81B-BE99-489F-AD23-9990F655C7D5",
                            LinkVideo = "https://youtu.be/YH-E4Y3EaT4",
                            Name = "Sinh viên IT đi thực tập tại doanh nghiệp cần biết những gì?",
                            Priority = 0,
                            SectionId = 1L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(50),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(68),
                            Description = "Mô hình Client - Server là gì?",
                            Duration = new TimeSpan(0, 0, 4, 13, 0),
                            HashCode = "BA21DA23-BCB1-41BD-95BB-669F657524BF",
                            LinkVideo = "https://youtu.be/zoELAirXMJY",
                            Name = "Mô hình Client - Server là gì?",
                            Priority = 0,
                            SectionId = 2L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(70),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(78),
                            Description = "Domain là gì? Tên miền là gì?",
                            Duration = new TimeSpan(0, 0, 7, 12, 0),
                            HashCode = "576225BB-C716-4F8A-8B96-51ED727DB42A",
                            LinkVideo = "https://youtu.be/M62l1xA5Eu8",
                            Name = "Domain là gì? Tên miền là gì?",
                            Priority = 0,
                            SectionId = 2L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(80),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(86),
                            Description = "Lesson 5",
                            Duration = new TimeSpan(0, 0, 4, 2, 0),
                            HashCode = "D3B5FFF7-E24A-419A-B058-9AC26552088C",
                            LinkVideo = "https://youtu.be/DpvYHLUiZpc",
                            Name = "Phương pháp học lập trình của Admin F8?",
                            Priority = 0,
                            SectionId = 3L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(88),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(96),
                            Description = "Làm sao để có thu nhập cao và đi xa hơn trong ngành IT?",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "5B4B08CB-7906-4705-9AC1-0CC5809E458E",
                            LinkVideo = "https://youtu.be/oF7isq9IjZM",
                            Name = "Làm sao để có thu nhập cao và đi xa hơn trong ngành IT?",
                            Priority = 0,
                            SectionId = 3L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(98),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(120),
                            Description = "Làm được gì sau khóa học?",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "9467E25E-19EC-4165-B526-A01AFACA0A48",
                            LinkVideo = "https://youtu.be/R6plN3FvzFY",
                            Name = "Làm được gì sau khóa học?",
                            Priority = 0,
                            SectionId = 4L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(122),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(129),
                            Description = "HTML, CSS là gì?",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "FD468249-96A5-409E-B94F-E68B52D2AD60",
                            LinkVideo = "https://youtu.be/zwsPND378OQ",
                            Name = "HTML, CSS là gì?",
                            Priority = 0,
                            SectionId = 5L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(133),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(141),
                            Description = "Làm quen với Dev tools",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "659FC410-323E-4B8A-907F-DA1F022161F2",
                            LinkVideo = "https://youtu.be/7BJiPyN4zZ0",
                            Name = "Làm quen với Dev tools",
                            Priority = 0,
                            SectionId = 5L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(143),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(150),
                            Description = "Cấu trúc file HTML",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            HashCode = "72501755-F532-4BB2-B14F-A83A9C1352BC",
                            LinkVideo = "https://youtu.be/LYnrFSGLCl8",
                            Name = "Cấu trúc file HTML",
                            Priority = 0,
                            SectionId = 6L,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(152),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Note", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("JsonContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonHashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Lập trình cơ bản",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(2455),
                            HashCode = "8A4EB22E-451D-4AB0-B1C1-54CEC2BFA4B4",
                            IsRead = false,
                            Link = "Linkvd1",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(2618),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Lập trình Java",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(4837),
                            HashCode = "35DAE15D-6B67-4979-A5DB-48E53950B538",
                            IsRead = false,
                            Link = "Linkvd2",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(4846),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            Content = "Lập trình Python",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(4858),
                            HashCode = "AA7E120E-0DFE-449C-97C6-FCA8B2EB9CAA",
                            IsRead = false,
                            Link = "Linkvd3",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(4860),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            Content = "Lập trình C#",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(4868),
                            HashCode = "52C60A16-0CDF-48B3-B033-39DC34DCC93D",
                            IsRead = false,
                            Link = "Linkvd4",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(4871),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            Content = "Lập trình nâng cao",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(4878),
                            HashCode = "CEA56C0C-818A-410D-AC2C-D58D2D943CCD",
                            IsRead = false,
                            Link = "Linkvd5",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 400, DateTimeKind.Local).AddTicks(4880),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.NotificationUser", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("NotificationUsers");

                    b.HasData(
                        new
                        {
                            NotificationId = 1L,
                            UserId = 1L,
                            HashCode = "B27DAAA5-AC75-41A9-B5CC-77D9053ABC3E"
                        },
                        new
                        {
                            NotificationId = 1L,
                            UserId = 3L,
                            HashCode = "A8AA4D8F-F7F8-4D46-85EA-286BC604BBD0"
                        },
                        new
                        {
                            NotificationId = 2L,
                            UserId = 4L,
                            HashCode = "6168B0D9-923D-4F81-B229-F54E6562EC1E"
                        },
                        new
                        {
                            NotificationId = 2L,
                            UserId = 5L,
                            HashCode = "F66CD74D-90C5-45EA-8A80-8875E18EEFF3"
                        },
                        new
                        {
                            NotificationId = 3L,
                            UserId = 3L,
                            HashCode = "E57E9738-523C-4123-A202-6090F75F597E"
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 401, DateTimeKind.Local).AddTicks(3040),
                            HashCode = "AB314DBD-80D8-46DC-B1F4-0FDDC39EE741",
                            Quantity = 1,
                            Status = 0,
                            TotalPrice = 100000m,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 401, DateTimeKind.Local).AddTicks(3072),
                            UserId = 3L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(3307),
                            HashCode = "6686CD83-31C5-49B5-AC8A-354848941111",
                            Quantity = 2,
                            Status = 0,
                            TotalPrice = 150000m,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(3344),
                            UserId = 4L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(3389),
                            HashCode = "1E70AF91-1C00-4DD5-8A0A-6EC4769CCE2B",
                            Quantity = 2,
                            Status = 0,
                            TotalPrice = 230000m,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(3394),
                            UserId = 5L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(3403),
                            HashCode = "44ACA34B-DD8A-4AF4-94C4-739560FF1D21",
                            Quantity = 2,
                            Status = 0,
                            TotalPrice = 250000m,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(3405),
                            UserId = 4L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(3413),
                            HashCode = "DADF67BA-191A-40E2-8FBC-AE0225A16B4A",
                            Quantity = 0,
                            Status = 0,
                            TotalPrice = 0m,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(3415),
                            UserId = 5L,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            CourseName = "Tiếng Anh chuyên ngành",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(5213),
                            HashCode = "9F67F342-D8E5-4682-B54B-39C6C4C637F6",
                            OrderId = 1L,
                            Price = 100000m,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(5231),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 2L,
                            CourseName = "Asp.net mvc 3",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(8398),
                            HashCode = "52FD4766-7284-4476-8FC5-27B161577CA4",
                            OrderId = 2L,
                            Price = 105000m,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(8423),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CourseId = 3L,
                            CourseName = "Học Python cơ bản",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(8439),
                            HashCode = "8F78610C-EDAC-493F-9C81-CE987B61168F",
                            OrderId = 3L,
                            Price = 110000m,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(8441),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CourseId = 4L,
                            CourseName = "C# cơ bản",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(8450),
                            HashCode = "2BF76B2F-A3FC-4A51-94A4-27E82FA6EB25",
                            OrderId = 4L,
                            Price = 115000m,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(8452),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CourseId = 5L,
                            CourseName = "Tiếng Anh ngữ pháp",
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(8464),
                            HashCode = "7F90E6C8-D478-424E-81AE-8588B7EE23A6",
                            OrderId = 3L,
                            Price = 120000m,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 402, DateTimeKind.Local).AddTicks(8466),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuizContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("LessonId")
                        .IsUnique();

                    b.ToTable("Quizs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(56),
                            HashCode = "E0B10CBD-DA37-417A-B0FF-44B3195E603D",
                            LessonId = 1L,
                            QuizContent = "Fresher Dot Net 10",
                            Score = 0,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(78),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(1593),
                            HashCode = "C4862B80-BC3C-40AC-8F3C-41FF53ABF209",
                            LessonId = 2L,
                            QuizContent = "Fresher Dot Net 10",
                            Score = 0,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(1612),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(1625),
                            HashCode = "61C992E8-9551-428A-9525-6EA29C2E4468",
                            LessonId = 3L,
                            QuizContent = "Fresher Dot Net 10",
                            Score = 0,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(1627),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(1635),
                            HashCode = "F8D24954-20EB-43BA-809E-098199746070",
                            LessonId = 4L,
                            QuizContent = "Fresher Dot Net 10",
                            Score = 0,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(1637),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(1645),
                            HashCode = "8B31A0D0-31FC-47BC-9EFE-DBB8AAD5A35C",
                            LessonId = 5L,
                            QuizContent = "Fresher Dot Net 10",
                            Score = 0,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 403, DateTimeKind.Local).AddTicks(1648),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.QuizUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Score")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.HasKey("UserId", "QuizId");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("QuizId");

                    b.ToTable("QuizUsers");

                    b.HasData(
                        new
                        {
                            UserId = 3L,
                            QuizId = 1L,
                            HashCode = "0BC9D864-02D7-423D-A64C-B03AA6331461",
                            Score = 5
                        },
                        new
                        {
                            UserId = 3L,
                            QuizId = 2L,
                            HashCode = "D1FE52E8-62C9-42F2-88E2-BFF5D66875C2",
                            Score = 6
                        },
                        new
                        {
                            UserId = 4L,
                            QuizId = 3L,
                            HashCode = "67C70C37-EE76-4084-93B2-87E63444D993",
                            Score = 5
                        },
                        new
                        {
                            UserId = 4L,
                            QuizId = 4L,
                            HashCode = "A00556C9-163D-4343-A59D-42F6A53B1BE2",
                            Score = 6
                        },
                        new
                        {
                            UserId = 5L,
                            QuizId = 5L,
                            HashCode = "DF671D71-0B59-467D-BCDF-B1BE8F4FF49F",
                            Score = 8
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "5d2146b9-9491-40c8-b1ad-691cec7b3194",
                            Description = "Quản Lý",
                            HashCode = "3799D14C-03B5-461B-A6C0-AE3F8281B0B1",
                            Name = "admin",
                            NormalizedName = "administrator"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyStamp = "0d6d8672-bb8d-448a-8c75-811449ba1697",
                            Description = "Giảng Viên",
                            HashCode = "2787DAC0-AFDF-43F5-8FBD-257B5857CA5B",
                            Name = "instructor",
                            NormalizedName = "Instructor"
                        },
                        new
                        {
                            Id = 3L,
                            ConcurrencyStamp = "c023f128-d92c-44dc-86eb-8cd91ba95e5b",
                            Description = "Người Dùng",
                            HashCode = "1DB8AA44-AEF6-44C4-A34B-5845265DE6AE",
                            Name = "user",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(5340),
                            Description = "Môi Trường, Con Người IT",
                            HashCode = "321TF81B-BE99-489F-AD23-9990F655C7D5",
                            Priority = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(5348),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 1L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6605),
                            Description = "Khái Niệm Kỹ Thuật Cần Biết",
                            HashCode = "431TF81B-BE99-489F-AD23-9990F655C7D5",
                            Priority = 2,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6616),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CourseId = 1L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6623),
                            Description = "Phương Pháp Định Hướng",
                            HashCode = "51FE75A6-619A-49FF-A2C6-700428A48854",
                            Priority = 3,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6625),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CourseId = 2L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6631),
                            Description = "Bắt Đầu",
                            HashCode = "1AB4F3A9-EA8A-4231-8DA4-3E42F768EF03",
                            Priority = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6633),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CourseId = 2L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6655),
                            Description = "Làm Quen Với HTML",
                            HashCode = "6D107704-F439-469E-8B1C-B2A25440D346",
                            Priority = 2,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6657),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            CourseId = 2L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6663),
                            Description = "Làm Quen Với CSS",
                            HashCode = "4d938648-0ebc-46f7-b953-093c7d28db43",
                            Priority = 3,
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 399, DateTimeKind.Local).AddTicks(6665),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.SocialMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Link")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(2919),
                            HashCode = "05938D79-D30C-443C-B065-A1EC7E581EEA",
                            Link = "Link media 1",
                            Name = "Media 1",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(2930),
                            UserId = 3L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4710),
                            HashCode = "864348DE-E655-4792-828F-18C8FDA8998D",
                            Link = "Link media 2",
                            Name = "Media 2",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4720),
                            UserId = 3L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4730),
                            HashCode = "C9F0E904-28A6-4730-ACE2-D1758E762D21",
                            Link = "Link media 3",
                            Name = "Media 3",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4732),
                            UserId = 4L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4738),
                            HashCode = "1B3795F7-560B-4712-A292-1F0B12A38E9D",
                            Link = "Link media 4",
                            Name = "Media 4",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4740),
                            UserId = 4L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4747),
                            HashCode = "F480A309-E2B4-4948-904A-0556F53EB634",
                            Link = "Link media 5",
                            Name = "Media 5",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4748),
                            UserId = 5L,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4753),
                            HashCode = "C29FAF72-059F-4E32-99B6-29459DDF2470",
                            Link = "Link media 6",
                            Name = "Media 6",
                            Status = 0,
                            UpdatedAt = new DateTime(2022, 1, 14, 15, 8, 18, 404, DateTimeKind.Local).AddTicks(4755),
                            UserId = 5L,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "28ee5c7a-4199-407e-9184-c9de5d4f0923",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            HashCode = "355928A0-E936-4BF0-BD08-12DF85F34979",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENLRKbX9QCelIRPdC5kD4JsGT3GmSjqiKUZghgkdKF6yGvd/rli4LMxVs0+xdFkfHA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "759ad3be-8200-4522-b536-34c797ce1d1d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "instructor1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Giang Vien",
                            HashCode = "3670CCE4-A029-4A83-A047-BB1FE3E1D3F1",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPbi3vAq0VHQvvnZ+SFIEq7n9t9jqch4UQYuMmNz/uRbgppzDLn1qChN0MF+kgcWKA==",
                            PhoneNumber = "0123456788",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "instructor1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "4af96991-bb29-4814-a022-85b9b5b15dee",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "instructor2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Giảng viên 1",
                            HashCode = "D9E58D24-67C4-489B-8E12-4E93AF068726",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEC5c2L72XwKceSMUJ48GDyLp2r4Eaoq+bkrmz/MfJD4XGVh+2o+t3jl/ILMz2mA1Uw==",
                            PhoneNumber = "0923456789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "instructor2",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "5c51e79d-84a8-447d-b88e-46ec7b6201fb",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "instructor3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Giảng viên 3",
                            HashCode = "88385ACA-7D80-4B6F-8CDC-33E2E6EBFF41",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAED33oOSCv2Ywx1Fzw0TDaQCVBL86T6DsGmt9jjsYMBWZkiBelTzKtr0RKXLIZN15Ug==",
                            PhoneNumber = "0932345678",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "instructor3",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "c43d3c1b-6b45-454a-8a23-4bd8844bc248",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguoi Dung 1",
                            HashCode = "378EF81B-BE99-489F-AD23-9990F655C7D5",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBTHA/oL5UCr9fiRjgLHjs9BDugjALn8HTeKolUpWff+w9BecDghv5EDjwBTX6GfJw==",
                            PhoneNumber = "0123456787",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "b1bb8583-b0a9-4e2b-98a1-1fa835edfab1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Người dùng 1",
                            HashCode = "D9DFDF78-8086-419C-8FA7-BFD5EE32167B",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEP/3827RK/N5YLkl7Cjr5Uss4yyORWHqdaHwvsYclPyE2VNcliuC2nqCbIG2e9ixLQ==",
                            PhoneNumber = "0923456777",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7L,
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "a381b4d0-b9ef-4bb9-9af3-9a56188e86c4",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Người dùng 2",
                            HashCode = "0656C94D-26ED-4E21-BBC8-A62528D5F42E",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPuVCvWfqhmBgQogoi72ZoNWIbvuEXDElOnRxFggrI/9An22zmbl/L0c8/5/ycROcw==",
                            PhoneNumber = "0909345097",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.UserCourse", b =>
                {
                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<string>("CourseHashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TotalLesson")
                        .HasColumnType("int");

                    b.Property<string>("UserHashCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses");

                    b.HasData(
                        new
                        {
                            CourseId = 1L,
                            UserId = 1L,
                            Completed = 1,
                            CourseHashCode = "1234928A0-E936-4BF0-BD08-12DF85F34979",
                            HashCode = "007D5F97-57BE-43CE-81BE-86C1CD376B7A",
                            TotalLesson = 0,
                            UserHashCode = "355928A0-E936-4BF0-BD08-12DF85F34979"
                        },
                        new
                        {
                            CourseId = 2L,
                            UserId = 1L,
                            Completed = 2,
                            CourseHashCode = "1234928A0-E936-4BF0-BD08-12DF85F34979",
                            HashCode = "3555C645-FE22-471B-BE72-9B6828C6F2B4",
                            TotalLesson = 0,
                            UserHashCode = "355928A0-E936-4BF0-BD08-12DF85F34979"
                        },
                        new
                        {
                            CourseId = 3L,
                            UserId = 1L,
                            Completed = 3,
                            CourseHashCode = "3221CCE4-A029-4A83-A047-BB1FE3E1D3F1",
                            HashCode = "3BD97597-F69D-48BA-ADB6-9156BEB0F8E4",
                            TotalLesson = 0,
                            UserHashCode = "355928A0-E936-4BF0-BD08-12DF85F34979"
                        },
                        new
                        {
                            CourseId = 4L,
                            UserId = 1L,
                            Completed = 4,
                            CourseHashCode = "D8E64356-21B3-4D8A-820B-E101548A033D",
                            HashCode = "71AC38C9-4DC8-4ACA-8F04-41F795A7C7A1",
                            TotalLesson = 0,
                            UserHashCode = "355928A0-E936-4BF0-BD08-12DF85F34979"
                        },
                        new
                        {
                            CourseId = 5L,
                            UserId = 1L,
                            Completed = 1,
                            CourseHashCode = "0F3B51E6-7DD9-4861-A693-53C7E258EE5E",
                            HashCode = "D915D8D8-A927-4E07-A563-E9B7D6C6591A",
                            TotalLesson = 0,
                            UserHashCode = "355928A0-E936-4BF0-BD08-12DF85F34979"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<long>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<long>");

                    b.Property<string>("HashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleHashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserHashCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L,
                            HashCode = "69b5e02b-7c9e-4e17-a80f-5a36b7bbb390",
                            RoleHashCode = "3799D14C-03B5-461B-A6C0-AE3F8281B0B1",
                            UserHashCode = "355928A0-E936-4BF0-BD08-12DF85F34979"
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 2L,
                            HashCode = "a76f7071-0167-4cf1-84b7-ec6a6006eb92",
                            RoleHashCode = "2787DAC0-AFDF-43F5-8FBD-257B5857CA5B",
                            UserHashCode = "3670CCE4-A029-4A83-A047-BB1FE3E1D3F1"
                        },
                        new
                        {
                            UserId = 3L,
                            RoleId = 2L,
                            HashCode = "da9170e4-3b17-4547-86b0-92c0a2fc7a01",
                            RoleHashCode = "2787DAC0-AFDF-43F5-8FBD-257B5857CA5B",
                            UserHashCode = "D9E58D24-67C4-489B-8E12-4E93AF068726"
                        },
                        new
                        {
                            UserId = 4L,
                            RoleId = 2L,
                            HashCode = "e448957a-df18-40ce-94ce-aa4a59c23209",
                            RoleHashCode = "2787DAC0-AFDF-43F5-8FBD-257B5857CA5B",
                            UserHashCode = "88385ACA-7D80-4B6F-8CDC-33E2E6EBFF41"
                        },
                        new
                        {
                            UserId = 5L,
                            RoleId = 3L,
                            HashCode = "4c674495-eed5-4c5a-b275-e67a413f2d35",
                            RoleHashCode = "1DB8AA44-AEF6-44C4-A34B-5845265DE6AE",
                            UserHashCode = "378EF81B-BE99-489F-AD23-9990F655C7D5"
                        },
                        new
                        {
                            UserId = 6L,
                            RoleId = 3L,
                            HashCode = "b0c24bc0-9c21-4afe-8fa2-fbd6f3a64a22",
                            RoleHashCode = "1DB8AA44-AEF6-44C4-A34B-5845265DE6AE",
                            UserHashCode = "D9DFDF78-8086-419C-8FA7-BFD5EE32167B"
                        },
                        new
                        {
                            UserId = 7L,
                            RoleId = 3L,
                            HashCode = "d4340eb2-a862-4ec6-9c77-c39634287fb5",
                            RoleHashCode = "1DB8AA44-AEF6-44C4-A34B-5845265DE6AE",
                            UserHashCode = "0656C94D-26ED-4E21-BBC8-A62528D5F42E"
                        });
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Answer", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Quiz", "Quiz")
                        .WithMany("Answers")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Assignment", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Lesson", "Lesson")
                        .WithMany("Assignments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.AssignmentUser", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Assignment", "Assignment")
                        .WithMany("AssignmentUsers")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BE.NET.As.LMS.Core.Models.User", "User")
                        .WithMany("AssignmentUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Category", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Comment", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Lesson", "Lesson")
                        .WithMany("Comments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BE.NET.As.LMS.Core.Models.Comment", "ParentComment")
                        .WithMany("SubComments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BE.NET.As.LMS.Core.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Course", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.DescriptionDetail", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Course", "Course")
                        .WithOne("DescriptionDetail")
                        .HasForeignKey("BE.NET.As.LMS.Core.Models.DescriptionDetail", "CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Lesson", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Section", "Section")
                        .WithMany("Lessons")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Note", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Lesson", "Lesson")
                        .WithMany("Notes")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BE.NET.As.LMS.Core.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.NotificationUser", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BE.NET.As.LMS.Core.Models.User", "User")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Order", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.OrderDetail", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Course", "Course")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CourseId");

                    b.HasOne("BE.NET.As.LMS.Core.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Quiz", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Lesson", "Lesson")
                        .WithOne("Quiz")
                        .HasForeignKey("BE.NET.As.LMS.Core.Models.Quiz", "LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.QuizUser", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Quiz", "Quiz")
                        .WithMany("QuizUsers")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE.NET.As.LMS.Core.Models.User", "User")
                        .WithMany("QuizUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Section", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.SocialMedia", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.User", "User")
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.UserCourse", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BE.NET.As.LMS.Core.Models.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.UserRole", b =>
                {
                    b.HasOne("BE.NET.As.LMS.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE.NET.As.LMS.Core.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Assignment", b =>
                {
                    b.Navigation("AssignmentUsers");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Category", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Comment", b =>
                {
                    b.Navigation("SubComments");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Course", b =>
                {
                    b.Navigation("DescriptionDetail");

                    b.Navigation("OrderDetails");

                    b.Navigation("Sections");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Lesson", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Comments");

                    b.Navigation("Notes");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Quiz", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuizUsers");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.Section", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("BE.NET.As.LMS.Core.Models.User", b =>
                {
                    b.Navigation("AssignmentUsers");

                    b.Navigation("Claims");

                    b.Navigation("Comments");

                    b.Navigation("Logins");

                    b.Navigation("Notes");

                    b.Navigation("NotificationUsers");

                    b.Navigation("Orders");

                    b.Navigation("QuizUsers");

                    b.Navigation("SocialMedias");

                    b.Navigation("Tokens");

                    b.Navigation("UserCourses");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
